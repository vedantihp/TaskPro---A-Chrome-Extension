<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css"/>
    <link href="https://fonts.googleapis.com/css2?family=Poppins&display=swap" rel="stylesheet"/>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap" rel="stylesheet">
  
    <link
    rel="stylesheet"
    href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css"
/>
<!-- Google Fonts -->
<link
    href="https://fonts.googleapis.com/css2?family=Poppins&display=swap"
    rel="stylesheet"
/>  <link rel="stylesheet" href="exp.css" />
    <title>Dashboard</title>
</head>
<body>
      
    <main> 
        <div class="slider">
            <div class="load">
                <div class="top">
                    <div id="greeting"></div>
                <h1 id="clocktime" class="clocktime"></h1>
                    </div>

                <div id="notes-widget">
            <textarea id="note-input" placeholder="Add your notes here"></textarea>
            <button id="save-button">Save</button>
            <div id="notes-list"></div>
            </div>
            <div id="todo-widget">
            <input type="text" id="task-input" placeholder="Add a new task">
            <ul id="task-list"></ul>
            <button id="print-button">PRINT</button>
            <br>
            <br>
            <br>
            <br>
            </div>

            <div id="pomodoro-app">
            <div id="container">
              <div id="timer">
                <div id="time">
                  <span id="minutes">25</span>
                  <span id="colon">:</span>
                  <span id="seconds">00</span>
                </div>
             <div id="filler"></div>
                </div>
          
                <div id="buttons">
                <button id="work">Work</button>
                <button id="shortBreak">Short Break</button>
                <br>
                <button id="longBreak">Long Break</button>
                <button id="stop">Stop</button>
                </div>
            </div>
            </div>
            
            <iframe src="https://calendar.google.com/calendar/embed?height=300&wkst=1&bgcolor=%23f5f5dd&ctz=Asia%2FKolkata&showTabs=0&src=dmVkYW50aWhwQGdtYWlsLmNvbQ&src=YWRkcmVzc2Jvb2sjY29udGFjdHNAZ3JvdXAudi5jYWxlbmRhci5nb29nbGUuY29t&src=Y2xhc3Nyb29tMTExNjYxNzM1Mzg5ODU2MDcwMzA4QGdyb3VwLmNhbGVuZGFyLmdvb2dsZS5jb20&src=Y2xhc3Nyb29tMTA1MzcyODg2MDI5NTk4NDIwMTM4QGdyb3VwLmNhbGVuZGFyLmdvb2dsZS5jb20&src=Y2xhc3Nyb29tMTEwMTM3Njc3ODE1NTUyMTkxNjk1QGdyb3VwLmNhbGVuZGFyLmdvb2dsZS5jb20&src=Y2xhc3Nyb29tMTAwMjQ2MjU2MzU4MjQxNDMxNDY3QGdyb3VwLmNhbGVuZGFyLmdvb2dsZS5jb20&src=Y2xhc3Nyb29tMTExMjE2NDM1NDUwMzUwNDA2ODYzQGdyb3VwLmNhbGVuZGFyLmdvb2dsZS5jb20&src=ZW4uaW5kaWFuI2hvbGlkYXlAZ3JvdXAudi5jYWxlbmRhci5nb29nbGUuY29t&color=%23039BE5&color=%2333B679&color=%23202124&color=%230047a8&color=%230047a8&color=%23c26401&color=%23c26401&color=%23cccccc"  style="border:solid 1px #777" width="300" height="300" frameborder="0" scrolling="no"></iframe>        

        
            <br>
            <br>
          <a class="logo" href="https://www.instagram.com/accounts/login/?next=https%3A%2F%2Faccountscenter.instagram.com%2F%3F__coig_login%3D1" target="_blank">
            <img src="instagram.jpg" alt="Instagram">
            </a>
            <a class="logo" href="https://web.whatsapp.com/" target="_blank">
                <img src="whatsapp.jpg" alt="WhatsApp">
            </a>
            <a class="logo" href="https://twitter.com/i/flow/login" target="_blank">
                <img src="twitter.jpg" alt="Twitter">
            </a>
            <a class="logo" href="https://accounts.spotify.com/en/status?flow_ctx=6f228537-72f8-495a-9d68-b8923fd0ff0d%3A1698257256" target="_blank">
                <img src="spotify.jpg" alt="Spotify">
            </a><br>
            <audio id="sound"></audio>
            <div class="dict">
                <div class="search-box">
                    <input type="text" placeholder="Type the word here.." id="inp-word"/>
                    <button id="search-btn">Search</button>
                </div>
                <div class="result" id="result"></div>
            </div>
        </div>
    </main>
    

<script src="exp.js"></script>

</body>
</html>



body {
  width: 97vw;
  height: 97vh;
  text-shadow: 0px 0px 20px #242424;
  font-family: 'Roboto', sans-serif; 
  color: #fff;
}

#todo-widget {
    margin-left: 10px; 
  }
  
#task-input , #note-input {
  
  background-color: beige;
  border-color: #242424;
}
  #task-list input[type="checkbox"] {
    margin-right: 10px;
  }
#task-list {
    width: 20%; 
  }

.top{
    display: flex;
    flex-direction: column;
    justify-content: center;
    color:beige;

}


.clocktime {
    font-size: 2em;
    text-align: center;
}

#greeting {
font-size: 3em;
align-items: center;
margin: auto;
}

#calendar-container {
    text-align: right;
    margin: 10 ;
  }

#notes-widget {
  float: right;
}


.load{
  animation : slide 2s;
}

.slider{
  background-repeat: no-repeat;
  background-size: cover;
  background-position: center;
  height: 100vh;
  width: 100%;
  animation: slide 40s infinite;
}

@keyframes slide{
  0%{
    background-image: url("image1.jpg");
  }
  20%{
    background-image: url("image1.jpg");
  }
  20.01%{
    background-image: url("image2.jpg");
  }
  40%{
    background-image: url("image2.jpg");
  }
  40.01%{
    background-image: url("image3.jpg");
  }
  60%{
    background-image: url("image3.jpg");
  }
  60.01%{
    background-image: url("image4.jpg");
  }
  80%{
    background-image: url("image4.jpg");
  }
  80.01%{
    background-image: url("image5.jpg");
  }
  100%{
    background-image: url("image5.jpg");
  }
}

.logo img{
    width: 30px; 
    height: 30px;
    float: left;
    box-sizing :border-box;
    border-radius: 50%;
}

.delete-button,.delete-note,#save-button,#print-button {
  font-size:smaller;
  padding: 4px 7px;
  text-align: center;
  cursor: pointer;
  outline: none;
  color: #7c2323;
  background-color: beige;
  border: none;
  border-radius: 5px;
  box-shadow: 0 4px #999;
}

.delete-button,.delete-note,#save-button,#print-button :hover {
  background-color: beige;

}

.delete-button,.delete-note,#save-button,#print-button :active {
  background-color: beige;
  box-shadow: 0 4px #666;
  transform: translateY(4px);
}


#pomodoro-app{
  float:right; 
  padding-left:50px;
}

#container{
  border:1px solid #333;
  border-radius :20px;
  width:150px;
  height:200px;
  padding:10px;
  text-align:center;
  background : beige;
}

#timer{ 
  color:#DC143C; 
  font-size:20px; 
  margin:10px auto;
  border : 5px solid #DC143C;
  border-radius:50%;
  width:100px;
  height:100px;
  overflow:hidden;
  position:relative;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  cursor:default;
}

#time{
  margin-top:40px;
  z-index : 1;
  position:relative;
}

#filler{
  background : #ddffcc;
  height: 0px;
  width: 200px;
  position:absolute; 
  bottom:0;
}

#buttons button { 
  background:#4da6ff; 
  border:none; 
  color:#fff; 
  cursor:pointer; 
  padding:1px; 
  width:50px; 
  margin:5px auto;
  font-size:7px;
  height : 20px;
  border-radius : 20px;
}

#buttons button#shortBreak{
  background : #0c0;
}

#buttons button#longBreak{
  background : #080;
}

#buttons button#stop{
  background : #DC143C;
}



.dict {
  margin-top: 80px;
  background-color: beige;
  width: 30vmin;
  position: absolute;
  transform: translate(-50%, -50%);
  top: 75%;
  left: 88%;
  padding: 10px 3px; 
  border-radius: 10px;
  box-shadow: 0 20px 40px rgba(38, 33, 61, 0.2); 
}
.search-box {
  background-color: beige;
  width: 100%;
  display: flex;
  justify-content: space-between;
}
#inp-word , #search-btn{
  font-size: 12px;
}
.search-box input {
  background-color: beige;
  padding: 5px;
  width: 60%;
  border: none;
  outline: none;
  border-bottom: 3px solid #ae9cff;
}
.search-box button {
  padding: 5px 0;
  width: 22%;
  background-color: #ae9cff;
  border: none;
  outline: none;
  color: beige;
  border-radius: 5px;
}
.result {
  position: relative;
}
.result h3 {
  font-size: 15px;
  color: #1f194c;
}
.result .word {
  display: flex;
  justify-content: space-between;
  margin-top: 25px;
}
.result button {
  background-color: transparent;
  color: #ae9cff;
  border: none;
  outline: none;
  font-size: 8px;
}
.result .details {
  display: flex;
  gap: 10px;
  color: #b3b6d4;
  margin: 5px 0 10px 0;
  font-size: 10px;
}
.word-meaning {
  font-family: "Poppins", sans-serif;
  color: #575a7b;
}
.word-example {
  font-family: "Poppins", sans-serif;
  color: #575a7b;
  font-style: italic;
  border-left: 5px solid #ae9cff;
  padding-left: 10px;
  margin-top: 15px;
}
.error {
  font-family: "Poppins", sans-serif;
  margin-top: 25px;
  text-align: center;
}
    
 
 const url = "https://api.dictionaryapi.dev/api/v2/entries/en/";
const searchBox = document.querySelector(".search-box");
const inpWord = document.getElementById("inp-word");
const searchBtn = document.getElementById("search-btn");
const result = document.getElementById("result");


searchBtn.addEventListener("click", (event) => {
    event.stopPropagation(); // Prevent click on the search button from closing the box
    const query = inpWord.value.trim();
    if (query !== "") {
        fetch(`${url}${query}`)
            .then((response) => response.json())
            .then((data) => {
                // Display the result
                result.innerHTML = `
                <div class="word">
                    <h3>${query}</h3>
                </div>
                <div class="details">
                    <p>${data[0].meanings[0].partOfSpeech}</p>
                    <p>/${data[0].phonetic}/</p>
                </div>
                <p class="word-meaning">
                   ${data[0].meanings[0].definitions[0].definition}
                </p>
                <p class="word-example">
                    ${data[0].meanings[0].definitions[0].example || ""}
                </p>`;
                sound.setAttribute("src", `https:${data[0].phonetics[0].audio}`);
            })
            .catch(() => {
                result.innerHTML = `<h3 class="error">Couldn't Find The Word</h3>`;
            });
    }
});

// Add a click event listener to the entire document
document.addEventListener("click", (event) => {
    // Check if the click was outside the search box
    if (event.target !== searchBox && !searchBox.contains(event.target)) {
        // Close the search box
        result.innerHTML = "";
    }
});


var pomodoro = {
    started: false,
    minutes: 0,
    seconds: 0,
    fillerHeight: 0,
    fillerIncrement: 0,
    interval: null,
    minutesDom: null,
    secondsDom: null,
    fillerDom: null,
  
    init: function () {
      var self = this;
      this.minutesDom = document.querySelector('#minutes');
      this.secondsDom = document.querySelector('#seconds');
      this.fillerDom = document.querySelector('#filler');
  
      document.querySelector('#work').addEventListener('click', function () {
        if (!self.started) {
          self.startWork.apply(self);
        }
      });
  
      document.querySelector('#shortBreak').addEventListener('click', function () {
        if (!self.started) {
          self.startShortBreak.apply(self);
        }
      });
  
      document.querySelector('#longBreak').addEventListener('click', function () {
        if (!self.started) {
          self.startLongBreak.apply(self);
        }
      });
  
      document.querySelector('#stop').addEventListener('click', function () {
        self.stopTimer.apply(self);
      });
  
      this.resetVariables(25, 0, false);
      this.updateDom();
    },
  
    resetVariables: function (mins, secs, started) {
      this.minutes = mins;
      this.seconds = secs;
      this.started = started;
      this.fillerIncrement = 100 / (this.minutes * 60);
      this.fillerHeight = 0;
    },
  
    startWork: function () {
      if (!this.started) {
        this.resetVariables(25, 0, true);
        this.startTimer();
      }
    },
  
    startShortBreak: function () {
      if (!this.started) {
        this.resetVariables(5, 0, true);
        this.startTimer();
      }
    },
  
    startLongBreak: function () {
      if (!this.started) {
        this.resetVariables(15, 0, true);
        this.startTimer();
      }
    },
  
    startTimer: function () {
      var self = this;
      this.interval = setInterval(function () {
        self.intervalCallback.apply(self);
      }, 1000);
    },
  
    stopTimer: function () {
      this.resetVariables(25, 0, false);
      clearInterval(this.interval);
      this.updateDom();
    },
  
    toDoubleDigit: function (num) {
      if (num < 10) {
        return "0" + parseInt(num, 10);
      }
      return num;
    },
  
    updateDom: function () {
      this.minutesDom.innerHTML = this.toDoubleDigit(this.minutes);
      this.secondsDom.innerHTML = this.toDoubleDigit(this.seconds);
      this.fillerDom.style.height = this.fillerHeight + '%';
    },
  
    intervalCallback: function () {
      if (!this.started) return false;
      if (this.seconds == 0) {
        if (this.minutes == 0) {
          this.timerComplete();
          return;
        }
        this.seconds = 59;
        this.minutes--;
      } else {
        this.seconds--;
      }
      this.fillerHeight += this.fillerIncrement;
      this.updateDom();
    },
  
    timerComplete: function () {
      this.started = false;
      clearInterval(this.interval);
      this.fillerHeight = 0;
      this.updateDom();
    },
  };
  
  window.onload = function () {
    pomodoro.init();
  };
  
  //Greetings and Time
fetch("https://api.unsplash.com/photos/random/?client_id=")
.then(res => res.json())
.then(data => {
    document.body.style.backgroundImage = `url(${data.urls.regular})`;
    document.getElementById("author").textContent = `By: ${data.user.name}`;
});

let timeDisplay = document.getElementById("clocktime");
let greeting = document.getElementById("greeting");

function currentTime() {
    const date = new Date();
    timeDisplay.textContent = date.toLocaleTimeString("en-us", { timeStyle: "medium" })
    if (date.toLocaleTimeString("en-us", { timestyle: "long" }).includes("PM")) {
        greeting.textContent = "Good evening!";
    } else {
        greeting.textContent = "Good morning!";
    };
};

setInterval(currentTime, 1000);


// To-Do List

        const taskInput = document.getElementById("task-input");
        const taskList = document.getElementById("task-list");
        const printButton = document.getElementById("print-button");

        let tasks = [];

        // Load tasks from localStorage if available
        const storedTasks = localStorage.getItem("tasks");
        if (storedTasks) {
            tasks = JSON.parse(storedTasks);
        }

        function saveTasks() {
            localStorage.setItem("tasks", JSON.stringify(tasks));
        }

        function addTask(taskText) {
            tasks.push({ text: taskText, completed: false });
            updateTaskList();
            saveTasks(); // Save tasks to localStorage
        }

        function updateTaskList() {
            taskList.innerHTML = "";
            tasks.forEach((task, index) => {
                const taskItem = document.createElement("li");
                taskItem.innerHTML = `
                    <input type="checkbox" id="checkbox-${index}" ${task.completed ? "checked" : ""}>
                    <label for="checkbox-${index}">${task.text}</label>
                    <button class="delete-button" data-index="${index}">Delete</button>`;
                taskItem.querySelector(".delete-button").addEventListener("click", deleteTask);
                taskItem.querySelector("input[type='checkbox']").addEventListener("change", toggleTask);
                taskList.appendChild(taskItem);
            });
        }

        function deleteTask(event) {
            const index = event.target.getAttribute("data-index");
            tasks.splice(index, 1);
            updateTaskList();
            saveTasks(); // Save tasks to localStorage
        }

        function toggleTask(event) {
            const index = parseInt(event.target.getAttribute("id").split("-")[1]);
            tasks[index].completed = !tasks[index].completed;
            updateTaskList();
            saveTasks(); // Save tasks to localStorage
        }

        function printToDoList() {
            const printableList = tasks.map(task => `Task: ${task.text} | Completed: ${task.completed ? "Yes" : "No"}`).join('\n');
            const printWindow = window.open('', '', 'width=600,height=600');
            printWindow.document.open();
            printWindow.document.write('<html><head><title>To-Do List</title></head><body>');
            printWindow.document.write('<h1>To-Do List</h1>');
            printWindow.document.write(`<pre>${printableList}</pre>`);
            printWindow.document.write('</body></html>');
            printWindow.document.close();
            printWindow.print();
        }

        printButton.addEventListener("click", printToDoList);

        taskInput.addEventListener("keydown", (event) => {
            if (event.key === "Enter" && taskInput.value.trim() !== "") {
                addTask(taskInput.value.trim());
                taskInput.value = "";
            }
        });

        updateTaskList();


//Calendar
  const calendarFrame = document.querySelector('iframe');
  calendarFrame.addEventListener('click', () => {
    alert('Calendar clicked!');
  });

// notes
const noteInput = document.getElementById("note-input");
const saveButton = document.getElementById("save-button");
const deleteButton = document.getElementById("delete-button");
const printNotes = document.getElementById("print-button");
const notesList = document.getElementById("notes-list");

// Load saved notes from localStorage
const savedNotes = JSON.parse(localStorage.getItem("notes")) || [];

function updateNotesList() {
    notesList.innerHTML = "";
    savedNotes.forEach((note, index) => {
        const noteItem = document.createElement("div");
        noteItem.innerHTML = `
            <span>${note}</span>
            <button class="delete-note" data-index="${index}">Delete</button>
        `;
        notesList.appendChild(noteItem);
    });

    // Add event listeners for delete buttons
    const deleteButtons = document.querySelectorAll(".delete-note");
    deleteButtons.forEach(button => {
        button.addEventListener("click", deleteNote);
    });
}

function saveNote() {
    const newNote = noteInput.value.trim();
    if (newNote !== "") {
        savedNotes.push(newNote);
        updateNotesList();
        noteInput.value = "";
        saveNotesToLocalStorage();
    }
}

function deleteNote(event) {
    const index = event.target.getAttribute("data-index");
    savedNotes.splice(index, 1);
    updateNotesList();
    saveNotesToLocalStorage();
}



function saveNotesToLocalStorage() {
    localStorage.setItem("notes", JSON.stringify(savedNotes));
}

saveButton.addEventListener("click", saveNote);

deleteButton.addEventListener("click", function() {
    savedNotes.length = 0; 
    updateNotesList();
    saveNotesToLocalStorage();
});

updateNotesList();


document.addEventListener("DOMContentLoaded", 
function () {
  // Function to fetch a new random quote
  function fetchQuote() {
      // Replace this URL with the actual Quotes API
      const apiUrl = "https://api.quotable.io";

      fetch(apiUrl)
          .then((response) => response.json())
          .then((data) => {
              const quoteText = data.text;
              const author = data.author;

              document.getElementById("quote-text").textContent = `"${quoteText}"`;
              document.getElementById("author").textContent = `- ${author}`;
          })
          .catch((error) => {
              console.error("Error fetching quote:", error);
          });
  }

  // Initial fetch of a quote
  fetchQuote();

  // Add an event listener to the "Get New Quote" button
  document.getElementById("new-quote-button").addEventListener("click", fetchQuote);
});


{
    "manifest_version": 3,
    "name": "Dashboard",
    "version": "1.0",
    "description": "Description of your extension",
    "permissions": ["activeTab", "storage"],
    "action": {
        "default_popup": "exp.html"
}
}